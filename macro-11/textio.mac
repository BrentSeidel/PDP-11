;
;  This is a collection of assembly language subroutines to send text to
;  the job console - I/O channel 0.  It is very loosely based on Ada.Text_IO.
;
	.INCLUDE /$COMMON.MAC/
	.INCLUDE /MACROS.MAC/
	.TITLE	TEXTIO Collection of routines to send text to the console
	.IDENT	"X00.00"
	.ENABL GBL

	.PSECT TEXTIO,I,RO,CON,GBL
;
;  Here is a collection of routines to do output to the
;  console.
;
;  Send a CR/LF to the console.  Called with no parameters.
;  JSR PC, newlin
;
	.SBTTL NEWLIN - Print a newline (cr/lf) to the console
newlin::
	JSR PC, clrxrb
	MOV #2, @#xrb+xrlen
	MOV #2, @#xrb+xrbc
	MOV #crlf, @#xrb+xrloc
	MOVB #0, @#xrb+xrci
	.WRITE
	RTS PC
;
;  Put text to the console.  Called with the buffer address
;  and length.
;  MOV len, -(SP)
;  MOV addr, -(SP)
;  JSR PC, put
;
	.SBTTL PUT - Put a text buffer to the console
buf = 4
len = 2
put::	JSR PC, clrxrb
	MOV buf(SP), @#xrb+xrlen
	MOV buf(SP), @#xrb+xrbc
	MOV len(SP), @#xrb+xrloc
	CLRB @#xrb+xrci
	.WRITE
	MOV (SP), 4(SP)
	ADD #4, SP
	RTS PC
;
;  Put a string to the console.  Called with the base address
;  of the string structure.
;  MOV str, -(SP)
;  JSR PC, puts
;
	.SBTTL PUTS - Write a string to the console
str = 6
puts::	MOV R0, -(SP)
	MOV R1, -(SP)
	JSR PC, clrxrb
	MOV str(SP), R0
	INC R0
	MOVB (R0), R1
	BIC #byteh, R1
	MOV R1, @#xrb+xrlen
	MOV R1, @#xrb+xrbc
	INC R0
	MOV R0, @#xrb+xrloc
	CLRB @#xrb+xrci
	.WRITE
;
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 2(SP)
	TST (SP)+
	RTS PC
;
;  Put a string to the console followed by a newline.  Called
;  with the base address of the string structure.
;  MOV str, -(SP)
;  JSR PC, putsnl
;
	.SBTTL PUTSLN - Put a string followed by a newline to the console
str = 6
putsln::
	MOV R0, -(SP)
	MOV R1, -(SP)
	JSR PC, clrxrb
	MOV str(SP), R0
	INC R0
	MOVB (R0), R1
	BIC #byteh, R1
	MOV R1, @#xrb+xrlen
	MOV R1, @#xrb+xrbc
	INC R0
	MOV R0, @#xrb+xrloc
	CLRB @#xrb+xrci
	.WRITE
;
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 2(SP)
	TST (SP)+
	JMP newline
;
;  Put text followed by a newline to the console.  Called with
;  buffer address and length.
;  MOV len, -(SP)
;  MOV addr, -(SP)
;  JSR PC, put
;
	.SBTTL PUTLN - Put a text buffer followed by a newline to the console
buf = 4
len = 2
putln::	JSR PC, clrxrb
	MOV buf(SP), @#xrb+xrlen
	MOV buf(SP), @#xrb+xrbc
	MOV len(SP), @#xrb+xrloc
	CLRB @#xrb+xrci
	.WRITE
	MOV (SP), 4(SP)
	ADD #4, SP
	JMP newline
	RTS PC
;
;  Numeric text output routines to print integers in octal, decimal, or
;  hexidecimal.  These are kept primarily for debugging purposes.  In
;  general the xxxstr routines should be used to convert numbers to
;  strings as they allow greater control over how the number is converted.
;  The strings can then be manipulated as needed.
;
;  Put an octal number to the console.  Called with a 16 bit number
;  MOV num, -(SP)
;  JSR PC, putoct
;
	.SBTTL PUTOCT - Put an octal number
num = 10.
putoct::
;
;  Local register usage
;    R0 - Number to convert
;    R1 - Lower 3 bits of number to convert
;    R2 - Pointer to output buffer
;    R3 - Loop counter
;
	MOV R0, -(SP)           ; Save registers
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
	MOV num(SP), R0         ; Get the number passed
	MOV #numbuf, R2
	ADD #6, R2              ; End of buffer
	MOV #6, R3
;
1$:	MOV R0, R1              ; Copy the number
	BIC #177770, R1         ; Get least three bits
	MOVB numtbl(R1), -(R2)  ; Move digit to buffer
	ASH #-3, R0             ; Shift number
	BIC #160000, R0		; Clear sign bits
	BEQ 2$
	SOB R3, 1$
;
2$:	MOV #7, R0
	SUB R3, R0
	MOV R0, -(SP)
	MOV R2, -(SP)
	JSR PC, put
;
	JMP clnup
;
	.SBTTL PUTDEC - Put a decimal number
putdec::
;
;  Local register usage
;   R0 - Number to convert
;   R1 - Remainder
;   R2 - Pointer to output buffer
;   R3 - Loop counter
;
	MOV R0, -(SP)		; Save registers
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
	MOV num(SP), R0
	MOV #numbuf, R2
	ADD #5, R2
	MOV #5, R3
;
1$:	MOV R0, R1
	XOR R0, R0
	DIV #10., R0
	MOVB numtbl(R1), -(R2)
	TST R0
	BEQ 2$
	SOB R3, 1$
;
2$:	MOV #6, R0
	SUB R3, R0
	MOV R0, -(SP)
	MOV R2, -(SP)
	JSR PC, put
;
	JMP clnup

	.SBTTL PUTHEX - Put a hexidecimal number
puthex::
;
;  Local register usage
;    R0 - Number to convert
;    R1 - Lower 4 bits of number to convert
;    R2 - Pointer to output buffer
;    R3 - Loop counter
;
	MOV R0, -(SP)		; Save registers
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
	MOV num(SP), R0		; Get the number passed
	MOV #numbuf, R2
	ADD #4, R2		; End of buffer
	MOV #4, R3
;
1$:	MOV R0, R1		; Copy the number
	BIC #177760, R1		; Get least four bits
	MOVB numtbl(R1), -(R2)	; Move digit to buffer
	ASH #-4, R0		; Shift number
	BIC #170000, R0		; Clear sign bits
	BEQ 2$
	SOB R3, 1$
;
2$:	MOV #5, R0
	SUB R3, R0
	MOV R0, -(SP)		; 4 hex digits
	MOV R2, -(SP)		; buffer address
	JSR PC, put		; print it out
;
clnup:	MOV (SP)+, R3		; Restore registers
	MOV (SP)+, R2
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 2(SP)
	TST (SP)+
	RTS PC
;
;  Get a string from the console.  Called with a pointer to
;  the string data structure.
;  MOV #str, -(SP)
;  JSR PC, gets
;
	.SBTTL GETS - Get a string from the console
str = 6
gets::	JSR PC, clrxrb
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV str(SP), R0
	MOVB (R0), R1
	BIC #byteh, R1
	ADD #2, R0
	MOV R1, @#xrb+xrlen
	CLR @#xrb+xrbc
	MOV R0, @#xrb+xrloc
	CLRB @#xrb+xrci
	CLR @#xrb+xrtime
	CLR @#xrb+xrmod
	.READ
	DEC R0
	MOVB @#xrb+xrbc, (R0)
;
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 2(SP)
	TST (SP)+
	RTS PC
;
	.END
