;
;  This file contains system related functions that are not
;  involved in I/O (those will be in other files).
;
	.INCLUDE /$COMMON.MAC/
	.INCLUDE /MACROS.MAC/
	.TITlE SYSTEM - System related functions
	.IDENT "X00.01"
	.ENABL GBL
;
	.PSECT SYS,RO,CON,GBL,I
	.SBTTL CLRXRB - Clears the XRB
;
;  Clear the XRB and FIRQB.  It is useful to do this before
;  certain calls to ensure that no old data remains to confuse
;  things.
;  Called as:
;  JSR PC, clrxrb
;  JSR PC, clrfqb
clrxrb::
	MOV R0, -(SP)
	MOV R1, -(SP)
;
	MOV #xrb, R0
	MOV #xrbsiz/2, R1
;
1$:	CLR (R0)+
	SOB R1, 1$
;
	MOV (SP)+, R1
	MOV (SP)+, R0
	RTS PC
;
	.SBTTL CLRFQB - Clears the FIRQB
clrfqb::
	MOV R0, -(SP)
	MOV R1, -(SP)
;
	MOV #firqb, R0
	MOV #fqbsiz/2, R1
;
1$:	CLR (R0)+
	SOB R1, 1$
;
	MOV (SP)+, R1
	MOV (SP)+, R0
	RTS PC
;
	.SBTTL EXIT - Exits the current program
;  Exit the current program.  This never returns.  This is
;  handy so that a module that only uses .EXIT won't have to
;  include $COMMON.MAC.
;  Called as:
;  JMP exit
exit::	.EXIT
;
	.SBTTL CVTFQB - Converts FIRQB to a file spec string
;  Convert FIRQB data back into a file spec string.
;  Flags exist for the various parts.
cfnam ==: 1		; Convert the name
cfext ==: 2		; Convert the extension
cfppn ==: 4		; Convert the ppn
cfdev ==: 8.		; Convert the device
;  Called as:
; MOV str, -(SP)
; MOV flag, -(SP)
; JSR PC, cvtfqb
str = 12.
flag = 10.
cvtfqb::
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
;
	MOV flag(SP), R0
	MOV str(SP), R1
	MOV #scbuf, R2
	MOVB #1, 1(R2)		; Set single character buff len to 1
	MOV flgnum, -(SP)	; Save number format on stack
	BIC #flglz+flgsgn, flgnum
;
	BIT #cfdev, R0
	BEQ 1$
	MOVB @#firqb+fqdev, 2(R2)
	appstr R2, R1
	MOVB @#firqb+fqdev+1, 2(R2)
	appstr R2, R1
	MOVB @#firqb+fqdevn+1, R3
	BEQ 10$
	MOVB @#firqb+fqdevn, R3
	decstr #cvtbuf, R3
	appstr #cvtbuf, R1
;
;  Convert device
;
10$:	MOVB #':, 2(R2)
	appstr R2, R1
;
1$:	BIT #cfppn, R0
	BEQ 2$
;
;  Convert PPN
;
	MOVB #'[, 2(R2)
	appstr #scbuf, R1
	MOVB @#firqb+fqppn+1, R3
	BIC #byteh, R3
	decstr #cvtbuf, R3
	appstr #cvtbuf, R1
;
	MOVB #',, 2(R2)
	appstr #scbuf, R1
	MOVB @#firqb+fqppn, R3
	BIC #byteh, R3
	decstr #cvtbuf, R3
	appstr #cvtbuf, R1
;
	MOVB #'], 2(R2)
	appstr #scbuf, R1
;
2$:	BIT #cfnam, R0
	BEQ 3$
;
;  Convert name
;
	r50str #cvtbuf, @#firqb+fqnam1
	appstr #cvtbuf, R1
	r50str #cvtbuf, @#firqb+fqnam1+2
	appstr #cvtbuf, R1
;
3$:	BIT #cfext, R0
	BEQ 4$
	MOVB #'., 2(R2)
	appstr R2, R1	; Add a dot for the extension
;
;  Convert extension
;
	r50str #cvtbuf, @#firqb+fqext
	appstr #cvtbuf, R1
;
4$:	MOV (SP)+, flgnum
	MOV (SP)+, R3
	MOV (SP)+, R2
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 4(SP)
	ADD #4, SP
	RTS PC
;
	.SBTTL GETERR - Returns a system error message
;  Returns the text for a specific error code in a string.  The error
;  code is truncated to be one byte - any high order bits are discarded.
;  The error text is truncated, if needed, to fit in the destination
;  string.  Any former contents of the string are lost.
;  Called as
;  MOV str, -(SP)
;  MOV err, -(SP)
;  JSR PC, geterr
str = 10.
err = 8.
geterr::
	JSR PC, clrfqb
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
;
	MOV str(SP), R0
	MOV err(SP), R1
;
	MOVB #errfq, @#firqb+fqfun
	MOVB R1, @#firqb+fqerno
	CALFIP
;
	MOVB (R0), R1		; Get string max len
	CMPB R1, #28.		; Check if long enough
	BLO 1$
	MOV #28., R1		; String is long enough
1$:	INC R0
	MOVB R1, (R0)		; Set destination length
	INC R0			; Point to destination
	MOV #firqb+fqfil, R2	; Point to source
2$:	MOVB (R2)+, (R0)+
	SOB R1, 2$ 
;
	MOV (SP)+, R2
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 4(SP)
	ADD #4, SP
	RTS PC
;
	.SBTTL SETNAM - Sets the current program name
;  Sets the currently executing program's name to the specified
;  text.  It is called with a string.  The string is converted
;  to two words of RAD50 that are then used to set the name.  Thus,
;  only the first 6 characters of the string are used and if the
;  string is shorter, it is considered to be padded on the right
;  with spaces.
;  Called as:
;  MOV str, -(SP)
;  JSR PC, setnam
str = 6.
setnam::
	MOV R0, -(SP)
	MOV R1, -(SP)
	JSR PC, clrfqb
;
	MOV str(SP), R0
	substr R0, #cvtbuf, #0, #3
	strr50 #cvtbuf, R1
	MOV R1, @#firqb+fqnam1
	substr R0, #cvtbuf, #3, #3
	strr50 #cvtbuf, R1
	MOV R1, @#firqb+fqnam1+2
	.NAME
;
	MOV (SP)+, R1
	MOV (SP)+, R0
	MOV (SP), 2(SP)
	TST (SP)+
	RTS PC
;
	.SBTTL SLEEP - Suspends job for a number of seconds
;  Suspend job for a specified amount of time in seconds.
;  Called as
;  MOV time, -(SP)
;  JSR PC, sleep
sleep::	JSR PC, clrxrb
	MOV 2(SP), @#xrb+xrlen
	.SLEEP
	MOV (SP), 2(SP)
	TST (SP)+
	RTS PC
;
	.SBTTL INIT - Standard program initialization
;  Perform standard program initialization.  Currently, this
;  just copies some of the FIRQB contents into some globals
;  for default values.
;  Called as:
;  JSR PC, init
init::	MOV @#firqb+fqppn, defppn
	MOV @#firqb+fqnam1, defnam
	MOV @#firqb+fqnam1+2, defnam+2
	MOV @#firqb+fqext, defext
	MOV @#firqb+fqdev, defdev
	MOV @#firqb+fqdevn, defdnm
	RTS PC
;
;  String buffers for routines
;
	string scbuf, 1		; A single character buffer
	string cvtbuf, 6	; A buffer for number conversion
	.END
