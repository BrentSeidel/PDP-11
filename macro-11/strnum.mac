;
;  This file contains some routines to convert between numbers and strings.
;
	.INCLUDE /MACROS.MAC/
	.TITLE STRNUM - Routines to convert between strings and numbers
	.IDENT "X0.00"
;
;  The data structure for a string is defined as follows:
;  str:  byte max - Maximum length of the string.  This should never change
;        byte len - Current length of the string.  Should be <= max
;        bytes buff - Buffer of max bytes containing the string.
;
;  Note that in general, if the destination is not large enough to hold
;  a string transfer, the destination will hold a truncated value.
;
	.PSECT STR,SAV,CON,GBL
;
;  The following three functions convert a signed or unsigned 16 bit integer
;  to a string in octal, decimal, or hexidecimal representation.  They are
;  all called in a similar fashion:
;  MOV str, -(SP)
;  MOV num, -(SP)
;  JSR PC, xxxstr
;  ADD #4, SP
;
;  Note that if the destination string is not long enough to contain the
;  full converted number, it will be truncated.
;
	.SBTTL OCTSTR - Convert a number to an octal string
;
;  Converts an integer value to a string containing the octal representation
;
num = 10.	; Stack offset for number
str = 12.	; Stack offset for string pointer
octstr::
	MOV R0, -(SP)		; Number value
	MOV R1, -(SP)
	MOV R2, -(SP)		; Temporary buffer
	MOV R3, -(SP)
;
;  Prepare to convert number
;
	MOV num(SP), R0		; Get the number passed
	MOV #numbuf, R2		; Address of destination buffer
	ADD #16., R2		; Point to end of buffer
	MOV #6, R3		; Loop count limit
	BIC #flgneg, flgnum	; Clear negative flag
	BIT #flgsgn, flgnum	; Check if signed numbers
	BEQ 1$
	TST R0			; Check if number is negative
	BGE 1$
	BIS #flgneg, flgnum	; Set the negative flag
	NEG R0			; and negate the number
;
;  Convert number to local buffer
;
1$:	MOV R0, R1
	BIC #177770, R1		; Least three bits
	MOVB numtbl(R1), -(R2)	; Copy ASCII digit to buffer
	ASH #-3, R0		; Shift out least octal digit
	BIC #160000, R0		; And clear any sign bits
	BNE 4$			; Continue if not zero
	BIT #flglz, flgnum	; Otherwise check if leading zeros
	BEQ 6$
4$:	SOB R3, 1$		; Otherwise loop again
	BR 5$
6$:	DEC R3
5$:	MOV #6, R1

	JMP clean1
;
;  Converts an integer value to a string containing the decimal represenation
;
decstr::
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
;
;  Prepare to convert number
;
	MOV num(SP), R0		; Get number passed
	MOV #numbuf, R2		; Address of destination buffer
	ADD #16., R2		; Point to end of destination
	MOV #5, R3		; Loop count
	BIC #flgneg, flgnum	; Clear negative flag
	BIT #flgsgn, flgnum	; Check if signed numbers
	BEQ 1$
	TST R0			; Check if number is negative
	BGE 1$
	BIS #flgneg, flgnum	; Set negative flag
	NEG R0			; and negate the number
;
;  Convert number to local buffer
;
1$:	MOV R0, R1		; For DIV, R0/R1 is treated as a
	clr R0			; 32 bit number so this get it in place
	DIV #10., R0
	MOVB numtbl(R1), -(R2)	; Add digit to buffer
	TST R0
	BNE 4$			; Continue if not zero
	BIT #flglz, flgnum	; Check if leading zeros
	BEQ 6$
4$:	SOB R3, 1$
;
	BR 5$
6$:	DEC R3
;
;  Now R2 points to the converted number.  Mov to the destination
;  string
;
5$:	MOV #5, R1

	JMP clean1
;
;  Convert an integer value to a string containing the hexidecimal
;  representation.
;
hexstr::
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
;
;  Prepare to convert number
;
	MOV num(sp), R0		; Get number passed
	MOV #numbuf, R2		; Address of destination
	ADD #16., R2		; Point to end of destination
	MOV #4, R3		; Loop count
	BIC #flgneg, flgnum	; Clear negative clag
	BIT #flgsgn, flgnum	; Check if signed numbers
	BEQ 1$
	TST R0			; Check if number is negative
	BGE 1$
	BIS #flgneg, flgnum	; Set negative flag
	NEG R0			; and negate number
;
;  Convert number to local buffer
;
1$:	MOV R0, R1
	BIC #177760, R1		; Least 4 bits
	MOVB numtbl(R1), -(R2)	; Copy ASCII digit to buffer
	ASH #-4, R0		; Shift out least octal digit
	BIC #170000, R0		; and clear sign bits
	BNE 4$			; Continue if not zero
	BIT #flglz, flgnum	; Otherwise check if leading zeros
	BEQ 6$
4$:	SOB R3, 1$		; Loop until done
	BR 5$
6$:	DEC R3
;
;  Figure out the string length
;
5$:	MOV #4, R1

	JMP clean1
;
;  The adding an optional minus sign and copying the converted
;  string to the destination is common, so no need to repeat it
;  in each routine.  At this point:
;  R1 - Max number of bytes expected
;  R2 - Pointer to source buffer
;  R3 - Decremented loop counter
;
clean1:
;
;  Figure out string length
;
	SUB R3, R1		; Length of string is in R1
;
;  Check for adding negative sign
;
	BIT #flgsgn, flgnum	; Check for printing signed numnbers
	BEQ 3$
	BIT #flgneg, flgnum	; Is number negative
	BEQ 3$
	MOVB #'-, -(R2)		; Add the negative sign
	INC R1			; Increase string length

3$:	MOV str(SP), R0		; Get address of string
	MOVB (R0), R3		; Max string size in R3
	BIC #byteh, R3		; Clear any sign bits
	CMPB R3, R1
	BHI 2$
	MOV R3, R1		; Limit size to max

2$:	INC R0			; Point to string length
	MOVB R1, (R0)		; Set string length
	INC R0			; Point to string buffer
1$:	MOVB (R2)+, (R0)+
	SOB R1, 1$
;
;  Common cleanup for all routines.  Restore registers and return.
;
clnup:	MOV (SP)+, R3
	MOV (SP)+, R2
	MOV (SP)+, R1
	MOV (SP)+, R0
	RTS PC
;
;  The following routines convert strings containing digits to
;  numbers.  Conversion stop when an invalid digit is detected.
;  If the numbers are two big for 16 bits, only the low order
;  16 bits are returned.
;  The calling sequence is:
;  MOV str, -(SP)
;  JSR PC, strxxx
;  MOV (SP)+, num
;
str = 10.
;
;  Octal conversion
stroct::
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
;
	MOV str(SP), R0
	INC R0
	MOVB (R0), R1
	BIC #byteh, R1	; Length of string
	INC R0		; Character pointer
	CLR R3		; Result value
	CMPB #0, R1	; If length is zero
	BEQ 2$		; Just return zero
	CMPB #'-, (R0)	; Is first character a -
	BNE 10$
	BIS #flgneg, flgnum	; Set the negative flag
	DEC R1		; One character already processed
	INC R0
	BR 1$
10$:	BIC #flgneg, flgnum	; Clear the negative flag
	CMPB #'+, (R0)	; Is first character a +
	BNE 1$
	DEC R1
	INC R0		; Just ignore it
;
1$:	MOVB (R0)+, R2	; Character to test
	SUB #'0, R2
	CMPB #8., R2
	BLOS 2$
	MUL #8., R3
	ADD R2, R3
	SOB R1, 1$
;
2$:	BIT #flgneg, flgnum	; Is number negative
	BEQ 3$
	NEG R3		; Negative it
3$:	MOV R3, str(SP)
	BR clnup
;
;  Decimal Conversion
;
strdec::
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
;
	MOV str(SP), R0
	INC R0
	MOVB (R0), R1
	BIC #byteh, R1	; Length of string
	INC R0		; Character pointer
	CLR R3		; Result value
	CMPB #0, R1	; If length is zero
	BEQ 2$		; Just return zero
	CMPB #'-, (R0)	; Is first character a -
	BNE 10$
	BIS #flgneg, flgnum	; Set the negative flag
	DEC R1
	INC R0
	BR 1$
10$:	BIC #flgneg, flgnum	; Clear the negaive flag
	CMPB #'+, (R0)	; Is first character a +
	BNE 1$
	DEC R1
	INC R0		; Just ignore it
;
1$:	MOVB (R0)+, R2	; Character to test
	SUB #'0, R2
	CMPB #10., R2
	BLOS 2$
	MUL #10., R3
	ADD R2, R3
	SOB R1, 1$
;
2$:	BIT #flgneg, flgnum	; Is number negative?
	BEQ 3$
	NEG R3		; Negative it
3$:	MOV R3, str(SP)
	BR clnup
;
;  Hexiecimal Conversion
;
strhex::
	MOV R0, -(SP)
	MOV R1, -(SP)
	MOV R2, -(SP)
	MOV R3, -(SP)
;
	MOV str(SP), R0
	INC R0
	MOVB (R0), R1
	BIC #byteh, R1	; Length of string
	INC R0		; Character pointer
	CLR R3		; Result value
	CMPB #0, R1	; If length is zero
	BEQ 3$		; Just return zero
	CMPB #'-, (R0)	; Is the first character a -
	BNE 10$
	BIS #flgneg, flgnum	; Set the negative flag
	DEC R1
	INC R0
	BR 1$
10$:	BIC #flgneg, flgnum	; Clear the negative flag
	CMPB #'+, (R0)	; Is the first character a +
	BNE 1$
	DEC R1
	INC R0		; Just ignore it
;
1$:	MOVB (R0)+, R2	; Character to test
	SUB #'0, R2
	CMPB #10., R2	; Check for digits
	BHI 2$
	SUB #'A-'0, R2	; Check for A-F
	CMPB #6, R2
	BLOS 3$
	ADD #10., R2
2$:	MUL #16., R3
	ADD R2, R3
	SOB R1, 1$
;
3$:	BIT #flgneg, flgnum	; Is the number negative
	BEQ 4$
	JSR PC, newline
	NEG R3		; Negative it
	JSR PC, newline
4$:	MOV R3, str(SP)
	JMP clnup
;
;  Text and strings for debugging.  Normally commented
;  out.  Uncomment the .INCLUDE macros.mac at the top
;  to use.
;
;	text neg, <The number is negative>
;	text pos, <The number is positive>
;	text msg, <Converting string |>
;	text vbar, <|>
;	text res, <Result is >
	.END
